# site.yml
# Master playbook for smartscaler-apps-installer
---
# Main playbook for cluster deployment
- name: Load global variables
  hosts: localhost
  gather_facts: false
  vars_files:
    - user_input.yml
  tasks:
    - name: Set global variables
      set_fact:
        kubernetes_deployment: "{{ kubernetes_deployment }}"
        k3s_deployment: "{{ k3s_deployment }}"
        metallb: "{{ metallb }}"
        nginx_ingress: "{{ nginx_ingress }}"
        global_control_plane_ip: "{{ global_control_plane_ip }}"
        global_kubeconfig: "{{ global_kubeconfig }}"
        global_kubecontext: "{{ global_kubecontext }}"
      delegate_to: localhost
      delegate_facts: true

- name: Deploy Smart Scaler Components
  hosts: localhost
  gather_facts: true
  vars_files:
    - "{{ lookup('env', 'VARS_FILE', default='user_input.yml') }}"

  pre_tasks:
    - name: Check if vault file exists
      stat:
        path: group_vars/all/vault.yml
      register: vault_file

    - name: Include vault file if it exists
      include_vars:
        file: group_vars/all/vault.yml
      when: vault_file.stat.exists
      ignore_errors: true

    - name: Set NGC API key
      set_fact:
        ngc_api_key: "{{ ngc_api_key | default(lookup('env', 'NGC_API_KEY')) | default(vault_ngc_api_key | default('')) }}"

    - name: Set NGC Docker API key
      set_fact:
        ngc_docker_api_key: "{{ ngc_docker_api_key | default(lookup('env', 'NGC_DOCKER_API_KEY')) | default(vault_ngc_docker_api_key | default('')) }}"

    - name: Set Avesha Docker username
      set_fact:
        avesha_docker_username: "{{ avesha_docker_username | default(lookup('env', 'AVESHA_DOCKER_USERNAME')) | default(vault_avesha_docker_username | default('')) }}"

    - name: Set Avesha Docker password
      set_fact:
        avesha_docker_password: "{{ avesha_docker_password | default(lookup('env', 'AVESHA_DOCKER_PASSWORD')) | default(vault_avesha_docker_password | default('')) }}"

    - name: Debug variable values
      debug:
        msg: |
          NGC API Key: {{ 'set' if ngc_api_key else 'not set' }}
          NGC Docker API Key: {{ 'set' if ngc_docker_api_key else 'not set' }}
          Avesha Docker Username: {{ 'set' if avesha_docker_username else 'not set' }}
          Avesha Docker Password: {{ 'set' if avesha_docker_password else 'not set' }}

    - name: Verify required variables
      fail:
        msg: |
          The following required variables are not set:
          {% if not ngc_api_key %}
          - NGC_API_KEY
          {% endif %}
          {% if not ngc_docker_api_key %}
          - NGC_DOCKER_API_KEY
          {% endif %}
          {% if not avesha_docker_username %}
          - AVESHA_DOCKER_USERNAME
          {% endif %}
          {% if not avesha_docker_password %}
          - AVESHA_DOCKER_PASSWORD
          {% endif %}
          
          Please set these variables using one of:
          1. Environment variables
          2. Command line arguments (-e)
          3. Vault file (group_vars/all/vault.yml)
      when: not ngc_api_key or not ngc_docker_api_key or not avesha_docker_username or not avesha_docker_password

    - name: Show credential source
      debug:
        msg: >-
          Using NGC credentials from: 
          {%- if ngc_api_key == lookup('env', 'NGC_API_KEY') %} environment variables
          {%- else %} command line arguments or vault
          {%- endif %}
          
          Using Avesha Systems credentials from:
          {%- if avesha_docker_username == lookup('env', 'AVESHA_DOCKER_USERNAME') %} environment variables
          {%- else %} command line arguments or vault
          {%- endif %}

  tasks:
    - name: Initialize summary tracking
      include_tasks: "tasks/summary_tracker.yml"
      when: summary_enabled | default(true)

    - name: Validate prerequisites
      include_tasks: "tasks/validate_prerequisites.yml"
      when: validate_prerequisites.enabled | default(true)

    # PHASE 1: Deploy K3s cluster FIRST (if enabled)
    - name: Deploy K3s cluster if enabled
      include_tasks: "tasks/deploy_k3s.yml"
      when: k3s_deployment.enabled | default(false)

    # PHASE 2: Wait for K3s to be ready and get kubeconfig
    - name: Wait for K3s cluster to be ready
      include_tasks: "tasks/wait_for_k3s.yml"
      when: k3s_deployment.enabled | default(false)

    # PHASE 3: Configure NVIDIA and other K8s-dependent components
    - name: Configure NVIDIA for Kubernetes (Post-K3s)
      include_tasks: "tasks/configure_nvidia_k8s.yml"
      when: 
        - k3s_deployment.enabled | default(false)
        - nvidia_enabled | default(false)

    # PHASE 4: Deploy all other components with proper kubeconfig
    - name: Include execution order for remaining components
      include_tasks: "tasks/process_execution_order.yml"
      vars:
        execution_vars:
          ngc_api_key: "{{ ngc_api_key }}"
          ngc_docker_api_key: "{{ ngc_docker_api_key }}"
          avesha_docker_username: "{{ avesha_docker_username }}"
          avesha_docker_password: "{{ avesha_docker_password }}"
      when: 
        - execution_order_enabled | default(true)
        - k3s_deployment.enabled | default(false)

  post_tasks:
    - name: Collect Kubernetes cluster information
      include_tasks: "tasks/collect_k8s_summary.yml"
      when: 
        - summary_enabled | default(true)
        - global_kubeconfig is defined

    - name: Generate final summary report
      include_tasks: "tasks/summary_tracker.yml"
      vars:
        generate_summary_report: true
        generate_k8s_summary_report: true
        should_save_summary: "{{ save_summary_to_file | default(true) }}"
      when: summary_enabled | default(true)

    - name: Display installation completion message
      debug:
        msg: |
          
          üéâ Smart Scaler installation process completed!
          
          {% if save_summary_to_file | default(true) %}
          üìÑ Summary report saved to: output/installation_summary_{{ ansible_date_time.epoch }}.md
          {% endif %}
          
          üîç Check the summary above for detailed results.
          
          üí° Next steps:
          ‚Ä¢ Verify all components are running: kubectl get pods --all-namespaces
          ‚Ä¢ Check service endpoints: kubectl get services --all-namespaces
          ‚Ä¢ Review logs for any issues: kubectl logs <pod-name> -n <namespace>
          ‚Ä¢ All output files are saved in the ./output/ directory
      when: summary_enabled | default(true)