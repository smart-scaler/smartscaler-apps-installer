---
- name: Wait for MicroK8s cluster to be fully ready
  ansible.builtin.command: microk8s status --wait-ready
  register: cluster_ready_check
  until: cluster_ready_check.rc == 0
  retries: 60
  delay: 10
  changed_when: false

- name: Determine cluster configuration
  ansible.builtin.set_fact:
    is_multinode: "{{ (groups['workers'] is defined and groups['workers'] | length > 0) or (groups['microk8s_cluster'] | length > 1) }}"
    primary_master_node: "{{ groups['primary_master'][0] if groups['primary_master'] is defined else groups['microk8s_cluster'][0] }}"
    worker_nodes: "{{ groups['workers'] | default([]) if groups['workers'] is defined else groups['microk8s_cluster'][1:] }}"
    total_nodes: "{{ (groups['primary_master'] | default([]) | length) + (groups['workers'] | default([]) | length) if groups['primary_master'] is defined else (groups['microk8s_cluster'] | length) }}"

- name: Display cluster configuration
  ansible.builtin.debug:
    msg: |
      MicroK8s Cluster Configuration:
      - Multi-node setup: {{ is_multinode }}
      - Primary master: {{ primary_master_node }}
      - Worker nodes: {{ worker_nodes | length }}
      - Total nodes: {{ total_nodes }}
      - Current node: {{ inventory_hostname }}
      - Node role: {{ node_role | default('primary-master') }}

- name: Multi-node cluster setup
  when: is_multinode | bool
  block:
    - name: Generate join token on primary master
      ansible.builtin.command: microk8s add-node
      register: join_token_output
      changed_when: true
      run_once: true
      delegate_to: "{{ primary_master_node }}"

    - name: Extract join command from token output
      ansible.builtin.set_fact:
        join_command: "{{ join_token_output.stdout_lines | select('match', '^microk8s join .*') | first }}"
      run_once: true
      delegate_to: "{{ primary_master_node }}"

    - name: Distribute join command to all nodes
      ansible.builtin.set_fact:
        cluster_join_command: "{{ hostvars[primary_master_node]['join_command'] }}"
      when: worker_nodes | length > 0

    - name: Join worker nodes to cluster
      ansible.builtin.command: "{{ cluster_join_command }}"
      when: 
        - inventory_hostname != primary_master_node
        - cluster_join_command is defined
        - inventory_hostname in (worker_nodes + groups['microk8s_cluster'][1:])
      register: join_result
      changed_when: true
      retries: 3
      delay: 30

    - name: Wait for all nodes to be ready
      ansible.builtin.command: microk8s kubectl get nodes --no-headers
      register: nodes_status
      until: 
        - nodes_status.rc == 0
        - (nodes_status.stdout_lines | select('search', 'Ready') | list | length) == total_nodes
      retries: 30
      delay: 15
      changed_when: false
      run_once: true

- name: Get cluster information
  ansible.builtin.command: microk8s kubectl cluster-info
  register: cluster_info
  changed_when: false
  run_once: true

- name: Display cluster information
  ansible.builtin.debug:
    msg: |
      MicroK8s Cluster Information:
      {{ cluster_info.stdout }}
  run_once: true

- name: Get all nodes status
  ansible.builtin.command: microk8s kubectl get nodes -o wide
  register: all_nodes_status
  changed_when: false
  run_once: true

- name: Display all nodes status
  ansible.builtin.debug:
    msg: |
      All MicroK8s Nodes:
      {{ all_nodes_status.stdout }}
  run_once: true

- name: Get all system pods status
  ansible.builtin.command: microk8s kubectl get pods -n kube-system
  register: system_pods_status
  changed_when: false
  run_once: true

- name: Display system pods status
  ansible.builtin.debug:
    msg: |
      System Pods Status:
      {{ system_pods_status.stdout }}
  run_once: true

- name: Create namespace for Smart Scaler if specified
  ansible.builtin.command: microk8s kubectl create namespace "{{ smart_scaler_namespace | default('smart-scaler') }}"
  register: namespace_creation
  failed_when: 
    - namespace_creation.rc != 0
    - "'already exists' not in namespace_creation.stderr"
  changed_when: "'already exists' not in namespace_creation.stderr"
  run_once: true
  when: smart_scaler_namespace is defined

- name: Verify cluster health
  ansible.builtin.command: microk8s kubectl get componentstatuses
  register: component_status
  changed_when: false
  run_once: true
  ignore_errors: true

- name: Display component status
  ansible.builtin.debug:
    msg: |
      Cluster Component Status:
      {{ component_status.stdout | default('Component status not available (this is normal in newer Kubernetes versions)') }}
  run_once: true

- name: Generate and save kubeconfig to local machine
  block:
    - name: Get kubeconfig content
      ansible.builtin.command: microk8s config
      register: kubeconfig_content
      changed_when: false

    - name: Save kubeconfig to localhost
      ansible.builtin.copy:
        content: "{{ kubeconfig_content.stdout }}"
        dest: "{{ playbook_dir }}/../output/kubeconfig"
        mode: '0600'
      delegate_to: localhost
      become: false

    - name: Fix kubeconfig server IP to use public/external IP
      ansible.builtin.replace:
        path: "{{ playbook_dir }}/../output/kubeconfig"
        regexp: 'server: https://127\.0\.0\.1:16443'
        replace: "server: https://{{ inventory_hostname }}:16443"
      delegate_to: localhost
      become: false

    - name: Also fix any private IP references in kubeconfig
      ansible.builtin.replace:
        path: "{{ playbook_dir }}/../output/kubeconfig"
        regexp: 'server: https://{{ ansible_default_ipv4.address }}:16443'
        replace: "server: https://{{ inventory_hostname }}:16443"
      delegate_to: localhost
      become: false
      failed_when: false

  run_once: true

- name: Display cluster setup completion
  ansible.builtin.debug:
    msg: |
      ðŸŽ‰ MicroK8s cluster setup completed successfully!
      
      Cluster Details:
      - Total Nodes: {{ total_nodes }}
      - Multi-node Setup: {{ is_multinode }}
      - Primary Master: {{ primary_master_node }}
      {% if worker_nodes | length > 0 %}
      - Worker Nodes: {{ worker_nodes | length }}
        {% for worker in worker_nodes %}
        - {{ worker }}
        {% endfor %}
      {% endif %}
      - Public API Endpoint: https://{{ primary_master_node }}:16443
      
      Kubeconfig saved to: {{ playbook_dir }}/../output/kubeconfig
      ðŸ“¡ External Access: Configured for public IP {{ primary_master_node }}
      
      Next steps:
      1. Export kubeconfig: export KUBECONFIG={{ playbook_dir }}/../output/kubeconfig
      2. Test external access: kubectl get nodes
      3. Check cluster status: kubectl get pods --all-namespaces
      4. Verify external connectivity from your local machine
      
      ðŸ”¥ Important: Ensure port 16443 is open in your cloud security group/firewall!
  run_once: true
