---
- name: Check if MicroK8s is already installed
  ansible.builtin.command: microk8s version
  register: microk8s_version_check
  failed_when: false
  changed_when: false

- name: Display current MicroK8s version if installed
  ansible.builtin.debug:
    msg: "MicroK8s is already installed: {{ microk8s_version_check.stdout }}"
  when: microk8s_version_check.rc == 0

- name: Install MicroK8s via snap
  community.general.snap:
    name: microk8s
    classic: true
    channel: "{{ microk8s_channel | default('latest/stable') }}"
  when: microk8s_version_check.rc != 0
  register: microk8s_install_result
  retries: 3
  delay: 30

- name: Add ansible user to microk8s group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: microk8s
    append: true
  when: ansible_user is defined and ansible_user != "root"

- name: Add root user to microk8s group
  ansible.builtin.user:
    name: root
    groups: microk8s
    append: true

- name: Set permissions for MicroK8s directory
  ansible.builtin.file:
    path: /var/snap/microk8s
    owner: root
    group: microk8s
    mode: '0755'
    recurse: true
  ignore_errors: true

- name: Wait for MicroK8s to be ready (initial)
  ansible.builtin.command: microk8s status --wait-ready
  register: microk8s_status
  until: microk8s_status.rc == 0
  retries: 30
  delay: 10
  changed_when: false

- name: Configure MicroK8s API server for external access
  block:
    - name: Create MicroK8s API server configuration directory
      ansible.builtin.file:
        path: /var/snap/microk8s/current/args
        state: directory
        mode: '0755'
      ignore_errors: true

    - name: Configure kube-apiserver for external access
      ansible.builtin.lineinfile:
        path: /var/snap/microk8s/current/args/kube-apiserver
        line: '--bind-address=0.0.0.0'
        regexp: '^--bind-address='
        create: true
        backup: true
      ignore_errors: true

    - name: Add public IP to API server advertise address
      ansible.builtin.lineinfile:
        path: /var/snap/microk8s/current/args/kube-apiserver
        line: '--advertise-address={{ inventory_hostname }}'
        regexp: '^--advertise-address='
        create: true
      ignore_errors: true

    - name: Restart MicroK8s to apply API server configuration
      ansible.builtin.command: microk8s stop
      register: microk8s_stop_result
      failed_when: false
      ignore_errors: true

    - name: Start MicroK8s with new API server configuration
      ansible.builtin.command: microk8s start
      register: microk8s_start_result
      failed_when: false
      ignore_errors: true

    - name: Wait for MicroK8s to be ready after restart
      ansible.builtin.command: microk8s status --wait-ready
      register: microk8s_ready_after_restart
      until: microk8s_ready_after_restart.rc == 0
      retries: 30
      delay: 10
      changed_when: false
      failed_when: false

    - name: Backup current CSR template
      ansible.builtin.copy:
        src: /var/snap/microk8s/current/certs/csr.conf.template
        dest: /var/snap/microk8s/current/certs/csr.conf.template.backup
        remote_src: true
      ignore_errors: true

    - name: Add public IP to CSR template for certificate SAN
      ansible.builtin.replace:
        path: /var/snap/microk8s/current/certs/csr.conf.template
        regexp: '^#MOREIPS$'
        replace: 'IP.3 = {{ inventory_hostname }}\n#MOREIPS'
        backup: true
      register: csr_template_modified
      ignore_errors: true

    - name: Regenerate server certificate with public IP in SAN
      ansible.builtin.command: microk8s refresh-certs --cert server.crt
      register: refresh_certs_result
      when: csr_template_modified.changed
      failed_when: false
      ignore_errors: true

    - name: Verify certificate includes public IP
      ansible.builtin.shell: openssl x509 -in /var/snap/microk8s/current/certs/server.crt -text -noout | grep -A 10 "Subject Alternative Name"
      register: cert_san_check
      failed_when: false
      ignore_errors: true

    - name: Display configuration changes result
      ansible.builtin.debug:
        msg: |
          MicroK8s configuration for external access:
          - Stop result: {{ 'Success' if microk8s_stop_result.rc == 0 else 'Failed' }}
          - Start result: {{ 'Success' if microk8s_start_result.rc == 0 else 'Failed' }}
          - Ready after restart: {{ 'Success' if microk8s_ready_after_restart.rc == 0 else 'Failed' }}
          - CSR template: {{ 'Modified' if csr_template_modified.changed else 'No change needed' }}
          - Certificate refresh: {{ 'Success' if refresh_certs_result.rc == 0 else 'Failed' if refresh_certs_result is defined else 'Skipped' }}
          
          Certificate Subject Alternative Names:
          {{ cert_san_check.stdout if cert_san_check.rc == 0 else 'Failed to check certificate' }}
          
          {% if refresh_certs_result.stdout %}
          Certificate refresh output: {{ refresh_certs_result.stdout }}
          {% endif %}
          {% if refresh_certs_result.stderr %}
          Certificate refresh error: {{ refresh_certs_result.stderr }}
          {% endif %}

- name: Wait for MicroK8s to be ready after configuration
  ansible.builtin.command: microk8s status --wait-ready
  register: microk8s_final_status
  until: microk8s_final_status.rc == 0
  retries: 30
  delay: 10
  changed_when: false

- name: Verify MicroK8s installation
  ansible.builtin.command: microk8s version
  register: microk8s_final_version
  changed_when: false

- name: Display MicroK8s installation status
  ansible.builtin.debug:
    msg: |
      MicroK8s installation completed:
      Version: {{ microk8s_final_version.stdout }}
      
- name: Check MicroK8s node status
  ansible.builtin.command: microk8s kubectl get nodes
  register: microk8s_nodes
  changed_when: false

- name: Display MicroK8s node status
  ansible.builtin.debug:
    msg: |
      MicroK8s node status:
      {{ microk8s_nodes.stdout }}
