---
- name: Check if Jetson detection is enabled
  fail:
    msg: "Jetson detection is disabled in user_input.yml"
  when: not jetson_prerequisites.enabled | default(false)

- name: Gather system facts
  setup:
  when: jetson_prerequisites.enabled | default(false)

- name: Check if this is a Jetson device
  block:
    - name: Check for Jetson hardware indicators
      stat:
        path: /proc/device-tree/model
      register: device_tree_model
      
    - name: Check for NVIDIA Tegra SoC
      stat:
        path: /proc/device-tree/compatible
      register: device_tree_compatible
      
    - name: Check for Jetson-specific files
      stat:
        path: /etc/nv_tegra_release
      register: nv_tegra_release
      
    - name: Check for Jetson in device tree model
      shell: cat /proc/device-tree/model 2>/dev/null | grep -i "jetson\|tegra" || echo "not_jetson"
      register: dt_model_content
      changed_when: false
      
    - name: Check for Jetson in device tree compatible
      shell: cat /proc/device-tree/compatible 2>/dev/null | grep -i "jetson\|tegra" || echo "not_jetson"
      register: dt_compatible_content
      changed_when: false
      
    - name: Check for NVIDIA Tegra release file
      shell: cat /etc/nv_tegra_release 2>/dev/null | head -1 || echo "not_jetson"
      register: tegra_release_content
      changed_when: false
      
    - name: Set Jetson detection facts
      set_fact:
        is_jetson: "{{ 'jetson' in dt_model_content.stdout.lower() or 'jetson' in dt_compatible_content.stdout.lower() or 'tegra' in dt_model_content.stdout.lower() or 'tegra' in dt_compatible_content.stdout.lower() or 'tegra' in tegra_release_content.stdout.lower() or nv_tegra_release.stat.exists }}"
        
    - name: Initialize jetson_gpu_info for non-Jetson devices
      set_fact:
        jetson_gpu_info:
          model: "Not a Jetson device"
          soc: "Not a Jetson device"
          revision: "Not a Jetson device"
          tegra_version: "Not a Jetson device"
          memory: "Not a Jetson device"
          storage: "Not a Jetson device"
          carrier: "Not a Jetson device"
          power_mode: "Not a Jetson device"
          gpu_frequency: "Not a Jetson device"
          cpu_info: "Not a Jetson device"
          is_jetson: false
          detection_methods:
            device_tree_model: "{{ dt_model_content.stdout | default('Not found') }}"
            device_tree_compatible: "{{ dt_compatible_content.stdout | default('Not found') }}"
            tegra_release: "{{ tegra_release_content.stdout | default('Not found') }}"
            tegra_release_file: "{{ nv_tegra_release.stat.exists }}"
      when: not is_jetson
        
    - name: Gather detailed Jetson GPU information
      block:
        - name: Get Jetson model and variant
          shell: |
            if [ -f /proc/device-tree/model ]; then
              cat /proc/device-tree/model | tr -d '\0'
            else
              echo "Unknown"
            fi
          register: jetson_model
          changed_when: false
          
        - name: Get Jetson SoC variant
          shell: |
            if [ -f /proc/device-tree/compatible ]; then
              cat /proc/device-tree/compatible | tr -d '\0' | grep -o "tegra[0-9]*" | head -1
            else
              echo "Unknown"
            fi
          register: jetson_soc
          changed_when: false
          
        - name: Get Jetson revision
          shell: |
            if [ -f /proc/device-tree/model ]; then
              cat /proc/device-tree/model | tr -d '\0' | grep -o "rev[0-9]*" | head -1
            else
              echo "Unknown"
            fi
          register: jetson_revision
          changed_when: false
          
        - name: Get NVIDIA Tegra release version
          shell: |
            if [ -f /etc/nv_tegra_release ]; then
              cat /etc/nv_tegra_release | head -1 | sed 's/.*R\([0-9]*\).*/\1/'
            else
              echo "Unknown"
            fi
          register: jetson_tegra_version
          changed_when: false
          
        - name: Get Jetson memory configuration
          shell: |
            if [ -f /proc/device-tree/model ]; then
              cat /proc/device-tree/model | tr -d '\0' | grep -o "[0-9]*GB" | head -1
            else
              echo "Unknown"
            fi
          register: jetson_memory
          changed_when: false
          
        - name: Get Jetson storage configuration
          shell: |
            if [ -f /proc/device-tree/model ]; then
              cat /proc/device-tree/model | tr -d '\0' | grep -o "eMMC\|SD\|NVMe" | head -1
            else
              echo "Unknown"
            fi
          register: jetson_storage
          changed_when: false
          
        - name: Get Jetson carrier board info
          shell: |
            if [ -f /proc/device-tree/model ]; then
              cat /proc/device-tree/model | tr -d '\0' | grep -o "carrier\|devkit\|nano\|xavier\|orin" | head -1
            else
              echo "Unknown"
            fi
          register: jetson_carrier
          changed_when: false
          
        - name: Get Jetson power mode
          shell: |
            if command -v nvpmodel >/dev/null 2>&1; then
              nvpmodel -q 2>/dev/null | grep "Power Mode" | awk '{print $3}' || echo "Unknown"
            else
              echo "nvpmodel not available"
            fi
          register: jetson_power_mode
          changed_when: false
          
        - name: Get Jetson GPU frequency
          shell: |
            if [ -d /sys/devices/gpu.0 ]; then
              cat /sys/devices/gpu.0/devfreq/gpufreq/cur_freq 2>/dev/null | awk '{print $1/1000000 " GHz"}' || echo "Unknown"
            else
              echo "GPU frequency not available"
            fi
          register: jetson_gpu_freq
          changed_when: false
          
        - name: Get Jetson CPU information
          shell: |
            if [ -f /proc/cpuinfo ]; then
              cat /proc/cpuinfo | grep "Hardware" | head -1 | awk -F': ' '{print $2}' || echo "Unknown"
            else
              echo "Unknown"
            fi
          register: jetson_cpu_info
          changed_when: false
          
        - name: Set comprehensive Jetson facts
          set_fact:
            jetson_gpu_info:
              model: "{{ jetson_model.stdout | default('Unknown') }}"
              soc: "{{ jetson_soc.stdout | default('Unknown') }}"
              revision: "{{ jetson_revision.stdout | default('Unknown') }}"
              tegra_version: "{{ jetson_tegra_version.stdout | default('Unknown') }}"
              memory: "{{ jetson_memory.stdout | default('Unknown') }}"
              storage: "{{ jetson_storage.stdout | default('Unknown') }}"
              carrier: "{{ jetson_carrier.stdout | default('Unknown') }}"
              power_mode: "{{ jetson_power_mode.stdout | default('Unknown') }}"
              gpu_frequency: "{{ jetson_gpu_freq.stdout | default('Unknown') }}"
              cpu_info: "{{ jetson_cpu_info.stdout | default('Unknown') }}"
              is_jetson: "{{ is_jetson }}"
              detection_methods:
                device_tree_model: "{{ dt_model_content.stdout | default('Not found') }}"
                device_tree_compatible: "{{ dt_compatible_content.stdout | default('Not found') }}"
                tegra_release: "{{ tegra_release_content.stdout | default('Not found') }}"
                tegra_release_file: "{{ nv_tegra_release.stat.exists }}"
      when: is_jetson
      
    - name: Set default jetson_gpu_info if not defined
      set_fact:
        jetson_gpu_info:
          model: "Not a Jetson device"
          soc: "Not a Jetson device"
          revision: "Not a Jetson device"
          tegra_version: "Not a Jetson device"
          memory: "Not a Jetson device"
          storage: "Not a Jetson device"
          carrier: "Not a Jetson device"
          power_mode: "Not a Jetson device"
          gpu_frequency: "Not a Jetson device"
          cpu_info: "Not a Jetson device"
          is_jetson: false
          detection_methods:
            device_tree_model: "Not a Jetson device"
            device_tree_compatible: "Not a Jetson device"
            tegra_release: "Not a Jetson device"
            tegra_release_file: false
      when: jetson_gpu_info is not defined
      
    - name: Display comprehensive Jetson detection results
      debug:
        msg: |
          üöÄ Comprehensive Jetson Detection Results:
          ===========================================
          
          üì± Device Information:
          - Model: {{ jetson_gpu_info.model | default('Unknown') }}
          - SoC: {{ jetson_gpu_info.soc | default('Unknown') }}
          - Revision: {{ jetson_gpu_info.revision | default('Unknown') }}
          - Tegra Version: R{{ jetson_gpu_info.tegra_version | default('Unknown') }}
          - Memory: {{ jetson_gpu_info.memory | default('Unknown') }}
          - Storage: {{ jetson_gpu_info.storage | default('Unknown') }}
          - Carrier Board: {{ jetson_gpu_info.carrier | default('Unknown') }}
          
          ‚ö° Performance Information:
          - Power Mode: {{ jetson_gpu_info.power_mode | default('Unknown') }}
          - GPU Frequency: {{ jetson_gpu_info.gpu_frequency | default('Unknown') }}
          - CPU Info: {{ jetson_gpu_info.cpu_info | default('Unknown') }}
          
          üîç Detection Methods:
          - Device Tree Model: {{ jetson_gpu_info.detection_methods.device_tree_model | default('Not found') }}
          - Device Tree Compatible: {{ jetson_gpu_info.detection_methods.device_tree_compatible | default('Not found') }}
          - Tegra Release: {{ jetson_gpu_info.detection_methods.tegra_release | default('Not found') }}
          - Tegra Release File: {{ jetson_gpu_info.detection_methods.tegra_release_file | default(false) }}
          
          ‚úÖ Is Jetson Device: {{ jetson_gpu_info.is_jetson | default(false) }}
          
  when: jetson_prerequisites.enabled | default(false)

- name: Install jetson-stats on Jetson devices
  block:
    - name: Check Python and pip availability
      shell: |
        echo "Python3 version: $(python3 --version 2>/dev/null || echo 'Not found')"
        echo "pip3 version: $(pip3 --version 2>/dev/null || echo 'Not found')"
        echo "python3 -m pip version: $(python3 -m pip --version 2>/dev/null || echo 'Not found')"
      register: python_pip_check
      changed_when: false
      
    - name: Display Python and pip status
      debug:
        msg: "{{ python_pip_check.stdout_lines }}"
      

      
    - name: Update package cache (Ubuntu/Debian)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      become: true
      when: ansible_os_family == "Debian"
      
    - name: Ensure pip3 is available (Ubuntu/Debian)
      package:
        name: 
          - python3-pip
          - python3-setuptools
        state: present
      become: true
      when: ansible_os_family == "Debian"
      register: pip_install_result
      ignore_errors: true
      
    - name: Try alternative pip package names (Ubuntu/Debian)
      package:
        name: 
          - python3-pip3
          - python3-pip
          - python-pip3
          - python-pip
        state: present
      become: true
      when: 
        - ansible_os_family == "Debian"
        - pip_install_result is failed
      register: pip_alt_install_result
      ignore_errors: true
      
    - name: Install pip using get-pip.py as fallback
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py
        mode: '0755'
      become: true
      when: 
        - ansible_os_family == "Debian"
        - pip_install_result is failed
        - pip_alt_install_result is failed
      
    - name: Execute get-pip.py to install pip
      command: python3 /tmp/get-pip.py --force-reinstall
      become: true
      when: 
        - ansible_os_family == "Debian"
        - pip_install_result is failed
        - pip_alt_install_result is failed
      register: get_pip_result
      ignore_errors: true
      
    - name: Update package cache (RHEL/CentOS)
      yum:
        update_cache: yes
      become: true
      when: ansible_os_family == "RedHat"
      
    - name: Ensure pip3 is available (RHEL/CentOS)
      package:
        name: 
          - python3-pip
          - python3-setuptools
        state: present
      become: true
      when: ansible_os_family == "RedHat"
      register: pip_install_result_rhel
      ignore_errors: true
      
    - name: Try alternative pip package names (RHEL/CentOS)
      package:
        name: 
          - python3-pip3
          - python-pip3
          - python-pip
        state: present
      become: true
      when: 
        - ansible_os_family == "RedHat"
        - pip_install_result_rhel is failed
      register: pip_alt_install_result_rhel
      ignore_errors: true
      
    - name: Install pip using get-pip.py as fallback (RHEL/CentOS)
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py
        mode: '0755'
      become: true
      when: 
        - ansible_os_family == "RedHat"
        - pip_install_result_rhel is failed
        - pip_alt_install_result_rhel is failed
      
    - name: Execute get-pip.py to install pip (RHEL/CentOS)
      command: python3 /tmp/get-pip.py --force-reinstall
      become: true
      when: 
        - ansible_os_family == "RedHat"
        - pip_install_result_rhel is failed
        - pip_alt_install_result_rhel is failed
      register: get_pip_result_rhel
      ignore_errors: true
      
    - name: Ensure pip3 is available (Generic)
      package:
        name: 
          - python3-pip
          - python3-setuptools
        state: present
      become: true
      when: ansible_os_family not in ["Debian", "RedHat"]
      register: pip_install_result_generic
      ignore_errors: true
      
    - name: Install pip using get-pip.py as fallback (Generic)
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py
        mode: '0755'
      become: true
      when: 
        - ansible_os_family not in ["Debian", "RedHat"]
        - pip_install_result_generic is failed
      
    - name: Execute get-pip.py to install pip (Generic)
      command: python3 /tmp/get-pip.py --force-reinstall
      become: true
      when: 
        - ansible_os_family not in ["Debian", "RedHat"]
        - pip_install_result_generic is failed
      register: get_pip_result_generic
      ignore_errors: true
      
    - name: Verify pip3 is available
      command: pip3 --version
      register: pip3_version_check
      changed_when: false
      ignore_errors: true
      
    - name: Fail if pip3 is not available
      fail:
        msg: "pip3 is not available after installation attempts. Please install pip3 manually on the target host."
      when: pip3_version_check.rc != 0
      
    - name: Check pip3 version for --break-system-packages support
      shell: |
        pip3_version=$(pip3 --version | grep -oE '[0-9]+\.[0-9]+' | head -1)
        echo "Raw pip3 version output: $(pip3 --version)"
        echo "Extracted version: $pip3_version"
        if [ -n "$pip3_version" ]; then
          major=$(echo $pip3_version | cut -d. -f1)
          minor=$(echo $pip3_version | cut -d. -f2)
          echo "Major version: $major"
          echo "Minor version: $minor"
          if [ "$major" -gt 21 ]; then
            echo "Version check: major ($major) > 21 = SUPPORTED"
            exit 0
          elif [ "$major" -eq 21 ] && [ "$minor" -ge 3 ]; then
            echo "Version check: major ($major) = 21 AND minor ($minor) >= 3 = SUPPORTED"
            exit 0
          else
            echo "Version check: major ($major) <= 21 and minor ($minor) < 3 = NOT SUPPORTED"
            exit 1
          fi
        else
          echo "Could not determine pip3 version = UNKNOWN"
          exit 2
        fi
      register: pip3_break_support
      changed_when: false
      failed_when: false
      
    - name: Set fact for pip3 break system packages support
      set_fact:
        pip3_supports_break_system: "{{ pip3_break_support.rc == 0 }}"
      
    - name: Debug pip3 version check results
      debug:
        msg: |
          pip3_break_support return code: {{ pip3_break_support.rc }}
          Full pip3_break_support.stdout:
          "{{ pip3_break_support.stdout }}"
          
          pip3_supports_break_system variable:
          "{{ pip3_supports_break_system }}"
          
          Expected: rc=0 means supported, rc=1 means not supported, rc=2 means unknown
      
    - name: Clean up get-pip.py temporary file
      file:
        path: /tmp/get-pip.py
        state: absent
      become: true
      when: 
        - (pip_install_result is failed and pip_alt_install_result is failed and get_pip_result is defined)
        - or (pip_install_result_rhel is failed and pip_alt_install_result_rhel is failed and get_pip_result_rhel is defined)
        - or (pip_install_result_generic is failed and get_pip_result_generic is defined)
      
    - name: Set extra_args for jetson-stats installation
      set_fact:
        jetson_stats_extra_args: "{{ '--break-system-packages' if pip3_supports_break_system else '' }}"
        jetson_stats_upgrade_extra_args: "{{ '--upgrade --break-system-packages' if pip3_supports_break_system else '--upgrade' }}"
      
    - name: Debug extra_args for jetson-stats installation
      debug:
        msg: |
          pip3_supports_break_system: "{{ pip3_supports_break_system }}"
          jetson_stats_extra_args: "{{ jetson_stats_extra_args }}"
          jetson_stats_upgrade_extra_args: "{{ jetson_stats_upgrade_extra_args }}"
      
    - name: Debug conditional logic for jetson-stats installation
      debug:
        msg: |
          About to run jetson-stats installation tasks:
          - pip3_supports_break_system = "{{ pip3_supports_break_system }}"
          - This should determine which task runs:
            * If true: 'with --break-system-packages' tasks
            * If false: 'without --break-system-packages' tasks
      
    - name: Check if jetson-stats is already installed (with --break-system-packages)
      pip:
        name: jetson-stats
        state: present
        executable: pip3
        extra_args: --break-system-packages
      register: jetson_stats_check
      become: true
      when: pip3_supports_break_system
      
    - name: Check if jetson-stats is already installed (without --break-system-packages)
      pip:
        name: jetson-stats
        state: present
        executable: pip3
      register: jetson_stats_check
      become: true
      when: not pip3_supports_break_system
      
    - name: Install/Upgrade jetson-stats (with --break-system-packages)
      pip:
        name: jetson-stats
        state: latest
        extra_args: --upgrade --break-system-packages
        executable: pip3
      become: true
      when: 
        - pip3_supports_break_system
        - jetson_stats_check.changed or jetson_stats_check.installed is not defined
      
    - name: Install/Upgrade jetson-stats (without --break-system-packages)
      pip:
        name: jetson-stats
        state: latest
        extra_args: --upgrade
        executable: pip3
      become: true
      when: 
        - not pip3_supports_break_system
        - jetson_stats_check.changed or jetson_stats_check.installed is not defined
      
    - name: Verify jetson-stats installation
      shell: |
        if python3 -c "import jtop; print('jetson-stats version:', jtop.__version__)" 2>/dev/null; then
          echo "jetson-stats installed successfully"
        else
          echo "jetson-stats not properly installed"
        fi
      register: jetson_stats_verification
      changed_when: false
      
    - name: Initialize jetson_stats_verification if not defined
      set_fact:
        jetson_stats_verification: {'stdout': 'Installation verification not completed'}
      when: jetson_stats_verification is not defined
      
    - name: Display jetson-stats verification result
      debug:
        msg: "{{ jetson_stats_verification.stdout }}"
        
    - name: Test jetson-stats functionality
      shell: timeout 5s jtop --no-ui 2>/dev/null || echo "jtop command test completed"
      register: jtop_test
      changed_when: false
      when: "'not properly installed' not in jetson_stats_verification.stdout"
      
    - name: Initialize jtop_test if not defined
      set_fact:
        jtop_test: {'stdout': 'jtop test not completed'}
      when: jtop_test is not defined
      
    - name: Display jtop test result
      debug:
        msg: "jtop test result: {{ jtop_test.stdout }}"
        
    - name: Display installation method summary
      debug:
        msg: |
          Jetson-stats Installation Summary:
          - Installation method: pip3{{ ' with --break-system-packages' if pip3_supports_break_system else ' without --break-system-packages (not supported)' }}
          - Final verification: {{ jetson_stats_verification.stdout }}
        

        
    - name: Check for jtop.sock file on Jetson nodes
      stat:
        path: /run/jtop.sock
      register: jtop_sock_check
      
    - name: Initialize jtop_sock_check with defaults if stat fails
      set_fact:
        jtop_sock_check: {'stat': {'exists': false, 'type': 'N/A', 'mode': 'N/A', 'pw_name': 'N/A'}}
      when: jtop_sock_check.stat is not defined or jtop_sock_check.stat.exists is not defined
      
    - name: Initialize connectivity variables with defaults
      set_fact:
        jtop_sock_connectivity: {'stdout': 'Not tested'}
        jtop_sock_container_access: {'stdout': 'Not tested'}
      when: jtop_sock_check.stat.exists
      
    - name: Initialize connectivity variables for non-Jetson or missing sock
      set_fact:
        jtop_sock_connectivity: {'stdout': 'Not applicable'}
        jtop_sock_container_access: {'stdout': 'Not applicable'}
      when: not jtop_sock_check.stat.exists or not is_jetson
      
    - name: Initialize service variables with defaults
      set_fact:
        jtop_service_status: {'stdout': 'Not tested'}
        jtop_service_config: {'stdout': 'Not tested'}
        jtop_service_enabled: {'stdout': 'Not tested'}
        jtop_sock_permissions: {'stdout': 'Not tested'}
      when: not is_jetson
      
    - name: Initialize service variables for Jetson devices
      set_fact:
        jtop_service_status: {'stdout': 'Service status not available'}
        jtop_service_config: {'stdout': 'Service config not available'}
        jtop_service_enabled: {'stdout': 'Service boot status not available'}
        jtop_sock_permissions: {'stdout': 'Permissions not available'}
        jtop_sock_connectivity: {'stdout': 'Connectivity not tested'}
        jtop_sock_container_access: {'stdout': 'Container access not tested'}
      when: is_jetson
      
    - name: Display jtop.sock status
      debug:
        msg: |
          jtop.sock Status:
          - File exists: {{ jtop_sock_check.stat.exists | default(false) }}
          - File type: {{ jtop_sock_check.stat.type | default('N/A') if jtop_sock_check.stat.exists else 'N/A' }}
          - Permissions: {{ jtop_sock_check.stat.mode | default('N/A') if jtop_sock_check.stat.exists else 'N/A' }}
          - Owner: {{ jtop_sock_check.stat.pw_name | default('N/A') if jtop_sock_check.stat.exists else 'N/A' }}
          
    - name: Verify jtop service is running
      shell: systemctl is-active --quiet jtop 2>/dev/null || echo "jtop service not found or not active"
      register: jtop_service_status
      changed_when: false
      
    - name: Display jtop service status
      debug:
        msg: "jtop service status: {{ jtop_service_status.stdout }}"
        
    - name: Check jtop service configuration
      shell: systemctl show jtop --property=Type,Restart,RestartSec 2>/dev/null || echo "jtop service configuration not found"
      register: jtop_service_config
      changed_when: false
      
    - name: Display jtop service configuration
      debug:
        msg: "jtop service configuration: {{ jtop_service_config.stdout }}"
        
    - name: Check if jtop service is enabled at boot
      shell: systemctl is-enabled jtop 2>/dev/null || echo "jtop service not enabled at boot"
      register: jtop_service_enabled
      changed_when: false
      
    - name: Display jtop service boot status
      debug:
        msg: "jtop service enabled at boot: {{ jtop_service_enabled.stdout }}"
        
    - name: Check jtop.sock connectivity
      shell: timeout 5s python3 -c "import socket; s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM); s.connect('/run/jtop.sock'); s.close(); print('jtop.sock is accessible')" 2>/dev/null || echo "jtop.sock is not accessible"
      register: jtop_sock_connectivity
      changed_when: false
      when: jtop_sock_check.stat.exists
      
    - name: Display jtop.sock connectivity result
      debug:
        msg: "{{ jtop_sock_connectivity.stdout | default('Connectivity not tested') }}"
      when: jtop_sock_connectivity is defined
        
    - name: Check jtop.sock permissions for container access
      shell: ls -la /run/jtop.sock 2>/dev/null | awk '{print $1, $3, $4}' || echo "Cannot check permissions"
      register: jtop_sock_permissions
      changed_when: false
      when: jtop_sock_check.stat.exists
      
    - name: Display jtop.sock permissions
      debug:
        msg: "jtop.sock permissions: {{ jtop_sock_permissions.stdout | default('Permissions not available') }}"
      when: jtop_sock_permissions is defined
        
    - name: Verify jtop.sock is accessible by containers
      shell: timeout 5s python3 -c "import os; print('Container accessible:', os.access('/run/jtop.sock', os.R_OK))" 2>/dev/null || echo "Cannot verify container access"
      register: jtop_sock_container_access
      changed_when: false
      when: jtop_sock_check.stat.exists
      
    - name: Display container access verification
      debug:
        msg: "{{ jtop_sock_container_access.stdout | default('Container access not tested') }}"
      when: jtop_sock_container_access is defined
        
  when: 
    - jetson_prerequisites.enabled | default(false)
    - jetson_gpu_info.is_jetson | default(false)

- name: Skip jetson-stats installation on non-Jetson devices
  debug:
    msg: "Skipping jetson-stats installation - this is not a Jetson device"
  when: 
    - jetson_prerequisites.enabled | default(false)
    - not jetson_gpu_info.is_jetson | default(false)

- name: Jetson prerequisites completed
  debug:
    msg: |
      Jetson Prerequisites Role Completed:
      - Device Type: {{ 'Jetson' if jetson_gpu_info.is_jetson | default(false) else 'Non-Jetson' }}
      - jetson-stats: {{ 'Installed/Updated' if jetson_gpu_info.is_jetson | default(false) else 'Skipped' }}
      - Status: {{ 'Success' if jetson_gpu_info.is_jetson | default(false) else 'Not Applicable' }}
  when: jetson_prerequisites.enabled | default(false)

- name: Jetson verification summary for Jetson nodes
  debug:
    msg: |
      üéØ Jetson Verification Summary:
      ================================
      ‚úÖ Device Detection: {{ 'PASS' if jetson_gpu_info.is_jetson | default(false) else 'N/A' }}
      ‚úÖ jetson-stats Installation: {{ 'PASS' if jetson_gpu_info.is_jetson | default(false) else 'N/A' }}
      ‚úÖ jtop Command Test: {{ 'PASS' if jetson_gpu_info.is_jetson and jetson_stats_verification is defined and 'not properly installed' not in jetson_stats_verification.stdout else 'N/A' }}
      ‚úÖ jtop.sock File: {{ 'PASS' if jetson_gpu_info.is_jetson and jtop_sock_check.stat.exists | default(false) else 'FAIL' if jetson_gpu_info.is_jetson else 'N/A' }}
      ‚úÖ jtop Service: {{ 'PASS' if jetson_gpu_info.is_jetson and jtop_service_status is defined and 'active' in jtop_service_status.stdout else 'FAIL' if jetson_gpu_info.is_jetson else 'N/A' }}
      ‚úÖ Service Configuration: {{ 'PASS' if jetson_gpu_info.is_jetson and jtop_service_config is defined and 'Type=' in jtop_service_config.stdout else 'FAIL' if jetson_gpu_info.is_jetson else 'N/A' }}
      ‚úÖ Boot Enabled: {{ 'PASS' if jetson_gpu_info.is_jetson and jtop_service_enabled is defined and 'enabled' in jtop_service_enabled.stdout else 'FAIL' if jetson_gpu_info.is_jetson else 'N/A' }}
      ‚úÖ Socket Connectivity: {{ 'PASS' if jetson_gpu_info.is_jetson and jtop_sock_check.stat.exists and jtop_sock_connectivity is defined and 'accessible' in jtop_sock_connectivity.stdout else 'FAIL' if jetson_gpu_info.is_jetson and jtop_sock_check.stat.exists else 'N/A' }}
      ‚úÖ Container Access: {{ 'PASS' if jetson_gpu_info.is_jetson and jtop_sock_check.stat.exists and jtop_sock_container_access is defined and 'True' in jtop_sock_container_access.stdout else 'FAIL' if jetson_gpu_info.is_jetson and jtop_sock_check.stat.exists else 'N/A' }}
      
      üìä Overall Status: {{ 'EXCELLENT' if jetson_gpu_info.is_jetson and jtop_sock_check.stat.exists | default(false) and jtop_service_status is defined and 'active' in jtop_service_status.stdout and jtop_service_enabled is defined and 'enabled' in jtop_service_enabled.stdout and jtop_sock_connectivity is defined and 'accessible' in jtop_sock_connectivity.stdout and jtop_sock_container_access is defined and 'True' in jtop_sock_container_access.stdout else 'GOOD' if jetson_gpu_info.is_jetson and jtop_sock_check.stat.exists | default(false) and jtop_service_status is defined and 'active' in jtop_service_status.stdout else 'NEEDS ATTENTION' if jetson_gpu_info.is_jetson else 'N/A' }}
      
      üîß Next Steps:
      {%- if is_jetson %}
      {%- if jtop_sock_check.stat.exists | default(false) %}
      - jtop.sock is available for monitoring
      - Use 'jtop --no-ui' for command-line monitoring
      - Use 'jtop' for interactive monitoring
      {%- else %}
      - jtop.sock not found - check jtop service status
      - May need to restart jtop service
      {%- endif %}
      {%- else %}
      - Not a Jetson device - no action needed
      {%- endif %}
      
      üåê Node Information:
      - Hostname: {{ ansible_hostname }}
      - IP Address: {{ ansible_default_ipv4.address if ansible_default_ipv4 else 'N/A' }}
      - Architecture: {{ ansible_architecture }}
      - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
      
      üöÄ Jetson GPU Details (if applicable):
      - Model: {{ jetson_gpu_info.model | default('N/A') }}
      - SoC: {{ jetson_gpu_info.soc | default('N/A') }}
      - Revision: {{ jetson_gpu_info.revision | default('N/A') }}
      - Tegra Version: R{{ jetson_gpu_info.tegra_version | default('N/A') }}
      - Memory: {{ jetson_gpu_info.memory | default('N/A') }}
      - Storage: {{ jetson_gpu_info.storage | default('N/A') }}
      - Carrier Board: {{ jetson_gpu_info.carrier | default('N/A') }}
      - Power Mode: {{ jetson_gpu_info.power_mode | default('N/A') }}
      - GPU Frequency: {{ jetson_gpu_info.gpu_frequency | default('N/A') }}
      - CPU Info: {{ jetson_gpu_info.cpu_info | default('N/A') }}
  when: jetson_prerequisites.enabled | default(false)

- name: Final role completion status
  debug:
    msg: |
      üéâ Jetson Prerequisites Role - {{ ansible_hostname }}
      ================================================
      üìç Node Type: {{ 'Jetson Device' if jetson_gpu_info.is_jetson | default(false) else 'Standard Node' }}
      üîß Role Status: {{ 'COMPLETED SUCCESSFULLY' if jetson_gpu_info.is_jetson | default(false) else 'SKIPPED (Not Applicable)' }}
      ‚è∞ Completion Time: {{ ansible_date_time.iso8601 }}
      
      {%- if jetson_gpu_info.is_jetson %}
      üöÄ This node is now ready for Jetson monitoring and K3s deployment!
      {%- else %}
      ‚úÖ This node is ready for K3s deployment (no Jetson-specific setup needed)
      {%- endif %}
  when: jetson_prerequisites.enabled | default(false)
