---
- name: Check if Kubernetes deployment is enabled
  fail:
    msg: "Kubernetes deployment is disabled in user_input.yml"
  when: not kubernetes_deployment.enabled | default(false)

- name: Check if Python requirements are already installed
  command: pip3 show ansible
  register: pip_check
  ignore_errors: true
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Install Python requirements
  block:
    - name: Install python3-pip and python3-dev
      apt:
        name: 
          - python3-pip
          - python3-dev
        state: present
        update_cache: yes
      become: true

    - name: Install required Python packages
      pip:
        name:
          - ansible
          - kubernetes
          - openshift
          - pyyaml
        state: present
      become: true
  when: 
    - kubernetes_deployment.enabled | default(false)
    - pip_check.rc != 0

- name: Display current working directory
  command: pwd
  register: current_dir
  changed_when: false

- name: Check if local Kubespray exists
  stat:
    path: "{{ kubespray_dir }}"
    get_checksum: no
    get_attributes: no
    get_mime: no
  register: kubespray_stat
  delegate_to: localhost
  when: kubernetes_deployment.enabled | default(false)

- name: Create Kubespray directory if it doesn't exist
  file:
    path: "{{ kubespray_dir }}"
    state: directory
    mode: '0755'
  when: not kubespray_stat.stat.exists and kubernetes_deployment.enabled | default(false)

- name: Download Kubespray
  get_url:
    url: "{{ kubespray_download_url }}"
    dest: "/tmp/kubespray-{{ kubespray_version }}.tar.gz"
    mode: '0644'
  delegate_to: localhost
  when: not kubespray_stat.stat.exists and kubernetes_deployment.enabled | default(false)

- name: Extract Kubespray
  unarchive:
    src: "/tmp/kubespray-{{ kubespray_version }}.tar.gz"
    dest: "{{ playbook_dir }}"
    remote_src: yes
  delegate_to: localhost
  when: not kubespray_stat.stat.exists and kubernetes_deployment.enabled | default(false)

- name: Rename Kubespray directory
  command:
    cmd: "mv {{ playbook_dir }}/kubespray-{{ kubespray_version | replace('v', '') }} {{ kubespray_dir }}"
  delegate_to: localhost
  when: not kubespray_stat.stat.exists and kubernetes_deployment.enabled | default(false)

- name: Clean up Kubespray archive
  file:
    path: "/tmp/kubespray-{{ kubespray_version }}.tar.gz"
    state: absent
  delegate_to: localhost
  when: not kubespray_stat.stat.exists and kubernetes_deployment.enabled | default(false)

- name: Create Kubespray inventory directory
  file:
    path: "{{ inventory_dir }}/kubespray"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)

- name: Check if inventory.ini exists
  stat:
    path: "{{ inventory_dir }}/kubespray/inventory.ini"
  register: inventory_stat
  when: kubernetes_deployment.enabled | default(false)

- name: Generate Kubespray inventory
  template:
    src: inventory.ini.j2
    dest: "{{ inventory_dir }}/kubespray/inventory.ini"
  vars:
    k8s_masters: "{{ kubernetes_deployment.control_plane_nodes | default([]) }}"
    k8s_workers: "{{ kubernetes_deployment.worker_nodes | default([]) }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Show inventory file contents
  command: cat {{ inventory_dir }}/kubespray/inventory.ini
  register: inventory_contents
  changed_when: false

- name: Display debug information
  debug:
    msg: |
      Current Directory: {{ current_dir.stdout }}
      Inventory Path: {{ inventory_dir }}/kubespray/inventory.ini
      Kubespray Dir: {{ kubespray_dir }}
      Group Vars Path: {{ inventory_dir }}/kubespray/group_vars/all/all.yml

- name: Ensure group_vars directory exists
  file:
    path: "{{ inventory_dir }}/kubespray/group_vars"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)

- name: Ensure group_vars/all directory exists
  file:
    path: "{{ inventory_dir }}/kubespray/group_vars/all"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)

- name: Generate group_vars/all/all.yml
  template:
    src: group_vars_all.yml.j2
    dest: "{{ inventory_dir }}/kubespray/group_vars/all/all.yml"
  vars:
    supplementary_addresses_in_ssl_keys: |
      ["{{ kubernetes_deployment.api_server.host }}"{% for node in kubernetes_deployment.control_plane_nodes + (kubernetes_deployment.worker_nodes | default([])) %},"{{ node.ansible_host }}"{% if node.private_ip and node.private_ip != node.ansible_host %},"{{ node.private_ip }}"{% endif %}{% endfor %}]
  when: kubernetes_deployment.enabled | default(false)

- name: Setup firewall and prerequisites
  block:
    - name: Setup firewall prerequisites
      include_tasks: firewall_prerequisites.yml
  become: true
  when: kubernetes_deployment.enabled | default(false)

- name: Deploy Kubernetes cluster
  include_tasks: deploy_kubernetes.yml
  when: deploy_kubernetes | default(true) | bool and kubernetes_deployment.enabled | default(false)

# Post-deployment tasks that require a running Kubernetes cluster
- name: Wait for Kubernetes API to be available
  wait_for:
    host: "{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }}"
    port: 6443
    timeout: 300
  when: 
    - kubernetes_deployment.enabled | default(false)
    - deploy_kubernetes | default(true) | bool

- name: Configure NVIDIA runtime and firewall
  block:
    - name: Configure NVIDIA runtime firewall rules
      include_tasks: firewall_config.yml
      register: firewall_config_result
      when:
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - deploy_kubernetes | default(true) | bool

    - name: Track successful firewall configuration
      include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
      vars:
        item_name: "nvidia-firewall-config"
        item_type: "kubernetes"
        item_details: "NVIDIA firewall rules configured successfully"
      when: 
        - summary_enabled | default(true)
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - firewall_config_result is succeeded

    - name: Track failed firewall configuration
      include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
      vars:
        item_name: "nvidia-firewall-config"
        item_type: "kubernetes"
        item_error: "{{ firewall_config_result.msg | default('Firewall configuration failed') }}"
        item_details: "NVIDIA firewall rules setup failed"
      when: 
        - summary_enabled | default(true)
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - firewall_config_result is failed

    - name: Configure NVIDIA runtime
      include_tasks: nvidia_runtime_config.yml
      register: nvidia_runtime_result
      when:
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - deploy_kubernetes | default(true) | bool

    - name: Track successful NVIDIA runtime configuration
      include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
      vars:
        item_name: "nvidia-runtime-config"
        item_type: "kubernetes"
        item_details: "NVIDIA runtime configured successfully"
      when: 
        - summary_enabled | default(true)
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - nvidia_runtime_result is succeeded

    - name: Track failed NVIDIA runtime configuration
      include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
      vars:
        item_name: "nvidia-runtime-config"
        item_type: "kubernetes"
        item_error: "{{ nvidia_runtime_result.msg | default('NVIDIA runtime configuration failed') }}"
        item_details: "NVIDIA container runtime setup failed"
      when: 
        - summary_enabled | default(true)
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - nvidia_runtime_result is failed
  become: true
  when: kubernetes_deployment.enabled | default(false)

- name: Create host_vars directory for explicit IP configuration
  file:
    path: "{{ inventory_dir }}/kubespray/host_vars"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)

- name: Copy Kubespray group_vars directory
  command:
    cmd: "cp -r {{ kubespray_dir }}/inventory/sample/group_vars {{ inventory_dir }}/kubespray/"
  delegate_to: localhost
  when: 
    - kubernetes_deployment.enabled | default(false)
    - not ansible_check_mode

- name: Ensure k8s_cluster directory exists
  file:
    path: "{{ inventory_dir }}/kubespray/group_vars/k8s_cluster"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)

- name: Copy k8s_cluster addons.yml
  command:
    cmd: "cp {{ kubespray_dir }}/inventory/sample/group_vars/k8s_cluster/addons.yml {{ inventory_dir }}/kubespray/group_vars/k8s_cluster/"
  delegate_to: localhost
  when: 
    - kubernetes_deployment.enabled | default(false)
    - not ansible_check_mode 