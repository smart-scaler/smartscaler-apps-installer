---
# Global flag to ignore all errors and continue deployment
# Set to true for debugging or to force completion of all tasks
- name: Set global error handling flag
  set_fact:
    ignore_all_errors: "{{ ignore_deployment_errors | default(false) }}"

- name: Display error handling mode
  debug:
    msg: 
      - "Global error handling mode: {{ 'IGNORE ERRORS' if ignore_all_errors | bool else 'FAIL ON ERRORS' }}"
      - "To ignore all errors, set: ignore_deployment_errors=true"
  when: kubernetes_deployment.enabled | default(false)

- name: Check if Kubernetes deployment is enabled
  fail:
    msg: "Kubernetes deployment is disabled in user_input.yml"
  when: not kubernetes_deployment.enabled | default(false)

- name: Display current working directory
  command: pwd
  register: current_dir
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Read user_input.yml
  slurp:
    src: "{{ playbook_dir }}/user_input.yml"
  register: user_input_content
  when: kubernetes_deployment.enabled | default(false)

- name: Parse user_input.yml content and set deployment variables
  set_fact:
    user_input: "{{ user_input_content.content | b64decode | from_yaml }}"
    k8s_ssh_key_path: "{{ (user_input_content.content | b64decode | from_yaml).kubernetes_deployment.ssh_key_path | default('~/.ssh/k8s_rsa') }}"
    k8s_default_user: "{{ (user_input_content.content | b64decode | from_yaml).kubernetes_deployment.default_ansible_user | default('root') }}"
    k8s_control_plane_nodes: "{{ (user_input_content.content | b64decode | from_yaml).kubernetes_deployment.control_plane_nodes }}"
    k8s_worker_nodes: "{{ (user_input_content.content | b64decode | from_yaml).kubernetes_deployment.worker_nodes | default([]) }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Generate inventory content
  template:
    src: "{{ playbook_dir }}/templates/inventory.ini.j2"
    dest: "{{ inventory_dir }}/kubespray/inventory.ini"
  vars:
    control_plane_nodes: "{{ k8s_control_plane_nodes }}"
    worker_nodes: "{{ k8s_worker_nodes }}"
    ssh_key_path: "{{ k8s_ssh_key_path }}"
    default_ansible_user: "{{ k8s_default_user }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Generate group vars
  template:
    src: "{{ playbook_dir }}/templates/group_vars.yml.j2"
    dest: "{{ inventory_dir }}/kubespray/group_vars/all/all.yml"
  vars:
    network_plugin: "{{ kubernetes_deployment.network_plugin | default('calico') }}"
    container_runtime: "{{ kubernetes_deployment.container_runtime | default('containerd') }}"
    dns_mode: "{{ kubernetes_deployment.dns_mode | default('coredns') }}"
    apiserver_loadbalancer_ip: "{{ kubernetes_deployment.apiserver_loadbalancer_ip | default(k8s_control_plane_nodes[0].ansible_host) }}"
    apiserver_port: "{{ kubernetes_deployment.apiserver_port | default(6443) }}"
    apiserver_loadbalancer_domain: "{{ kubernetes_deployment.apiserver_loadbalancer_domain | default('') }}"
    control_plane_nodes: "{{ k8s_control_plane_nodes }}"
    kube_version: "{{ kubernetes_deployment.kube_version | default('1.30.0') }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Show generated inventory file contents
  command: cat {{ inventory_dir }}/kubespray/inventory.ini
  register: inventory_contents
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Display debug information
  debug:
    msg: |
      Current Directory: {{ current_dir.stdout }}
      Inventory Path: {{ inventory_dir }}/kubespray/inventory.ini
      Kubespray Dir: {{ kubespray_dir }}
      Group Vars Path: {{ inventory_dir }}/kubespray/group_vars/all/all.yml
      SSH Key Path: {{ k8s_ssh_key_path }}
      Default User: {{ k8s_default_user }}
  when: kubernetes_deployment.enabled | default(false)

- name: Test SSH connection to all hosts
  command:
    cmd: "ssh -i {{ k8s_ssh_key_path | expanduser }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 {{ item.ansible_user | default(k8s_default_user) }}@{{ item.ansible_host }} 'echo SSH connection successful'"
  loop: "{{ k8s_control_plane_nodes + k8s_worker_nodes }}"
  register: ssh_test
  changed_when: false
  ignore_errors: true
  when: kubernetes_deployment.enabled | default(false)

- name: Display SSH test results
  debug:
    var: ssh_test
  when: kubernetes_deployment.enabled | default(false)

- name: Set Ansible environment variables
  set_fact:
    ansible_env_vars: "{{ kubespray_env | combine(kubespray_extra_env) }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Set default values for async execution
  set_fact:
    kubespray_async_timeout: "{{ user_input.kubernetes_deployment.deployment_timeout | default(3600) | int * 60 }}"  # Convert minutes to seconds
    kubespray_poll_interval: "{{ user_input.kubernetes_deployment.poll_interval | default(30) }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Display deployment timeout settings
  debug:
    msg: |
      Deployment timeout: {{ kubespray_async_timeout }} seconds ({{ (kubespray_async_timeout | int / 60) | round(1) }} minutes)
      Polling interval: {{ kubespray_poll_interval }} seconds
      Maximum polls: approximately {{ (kubespray_async_timeout | int / kubespray_poll_interval | int) | round(0) }}
  when: kubernetes_deployment.enabled | default(false)

- name: Run Kubespray cluster deployment
  command:
    cmd: >
      ansible-playbook -i {{ inventory_dir }}/kubespray/inventory.ini
      {{ kubespray_dir }}/cluster.yml
      -e @{{ inventory_dir }}/kubespray/group_vars/all/all.yml
      --become
      --become-method={{ kubespray_become_method }}
      --become-user={{ kubespray_become_user }}
      -e ansible_ssh_private_key_file={{ k8s_ssh_key_path | expanduser }}
      -e ansible_user={{ k8s_default_user }}
      -e ansible_become_pass=''
      --ssh-extra-args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ControlMaster=auto -o ControlPersist=60s"
      -vvvv
  environment: "{{ kubespray_env | combine(kubespray_extra_env) | combine({'ANSIBLE_CONFIG': playbook_dir + '/ansible.cfg', 'ANSIBLE_SSH_RETRIES': '10', 'ANSIBLE_TIMEOUT': '60'}) }}"
  register: kubespray_result
  async: "{{ kubespray_async_timeout }}"
  poll: "{{ kubespray_poll_interval }}"
  ignore_errors: true
  failed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Display Kubespray deployment result
  debug:
    msg: |
      STDOUT:
      {{ kubespray_result.stdout_lines | default([]) | join('\n') }}
      
      STDERR:
      {{ kubespray_result.stderr_lines | default([]) | join('\n') }}
  when: kubespray_result is defined and kubernetes_deployment.enabled | default(false)

- name: Validate kubeconfig on remote node
  block:
    - name: Check cluster info on remote node
      command: kubectl cluster-info
      register: cluster_info
      delegate_to: "{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }}"
      vars:
        ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
        ansible_user: "{{ kubernetes_deployment.control_plane_nodes[0].ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
        LC_ALL: C.UTF-8
        LANG: C.UTF-8

    - name: Display cluster info
      debug:
        msg: "{{ cluster_info.stdout_lines }}"

    - name: Get node status on remote node
      command: kubectl get nodes
      register: node_status
      delegate_to: "{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }}"
      vars:
        ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
        ansible_user: "{{ kubernetes_deployment.control_plane_nodes[0].ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
        LC_ALL: C.UTF-8
        LANG: C.UTF-8

    - name: Display node status
      debug:
        msg: "{{ node_status.stdout_lines }}"

  when: kubernetes_deployment.enabled | default(false)

- name: Ensure files directory exists
  file:
    path: "{{ lookup('env', 'PWD') }}/files"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false) 