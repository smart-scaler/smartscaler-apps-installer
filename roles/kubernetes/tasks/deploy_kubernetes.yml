---
# Global flag to ignore all errors and continue deployment
# Set to true for debugging or to force completion of all tasks
- name: Set global error handling flag
  set_fact:
    ignore_all_errors: "{{ ignore_deployment_errors | default(false) }}"

- name: Display error handling mode
  debug:
    msg: 
      - "Global error handling mode: {{ 'IGNORE ERRORS' if ignore_all_errors | bool else 'FAIL ON ERRORS' }}"
      - "To ignore all errors, set: ignore_deployment_errors=true"
  when: kubernetes_deployment.enabled | default(false)

- name: Check if Kubernetes deployment is enabled
  fail:
    msg: "Kubernetes deployment is disabled in user_input.yml"
  when: 
    - not kubernetes_deployment.enabled | default(false)
    - not ignore_all_errors | bool

- name: Display current working directory
  command: pwd
  register: current_dir
  changed_when: false
  ignore_errors: "{{ ignore_all_errors | bool }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Read user_input.yml
  slurp:
    src: "{{ playbook_dir }}/user_input.yml"
  register: user_input_content
  ignore_errors: "{{ ignore_all_errors | bool }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Parse user_input.yml content
  set_fact:
    user_input: "{{ user_input_content.content | b64decode | from_yaml }}"
  ignore_errors: "{{ ignore_all_errors | bool }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Set Kubernetes deployment variables dynamically from user_input.yml
  block:
    - name: Read user_input.yml for variable extraction
      slurp:
        src: "{{ playbook_dir }}/user_input.yml"
      register: config_content
      
    - name: Extract configuration and set variables
      set_fact:
        config_data: "{{ config_content.content | b64decode | from_yaml }}"
        
    - name: Set Kubernetes deployment variables from config
      set_fact:
        k8s_ssh_key_path: "{{ config_data.kubernetes_deployment.ssh_key_path | default('~/.ssh/k8s_rsa') }}"
        k8s_default_user: "{{ config_data.kubernetes_deployment.default_ansible_user | default('root') }}"
        k8s_control_plane_nodes: "{{ config_data.kubernetes_deployment.control_plane_nodes | default([]) }}"
        k8s_worker_nodes: "{{ config_data.kubernetes_deployment.worker_nodes | default([]) }}"
        k8s_kubeconfig_path: "{{ config_data.kubernetes_deployment.kubeconfig_path | default('/etc/kubernetes/admin.conf') }}"
        k8s_deployment_timeout: "{{ config_data.kubernetes_deployment.deployment_timeout | default(3600) }}"
        k8s_poll_interval: "{{ config_data.kubernetes_deployment.poll_interval | default(30) }}"
  rescue:
    - name: Set fallback variables if config reading fails
      set_fact:
        k8s_ssh_key_path: "~/.ssh/k8s_rsa"
        k8s_default_user: "root"
        k8s_control_plane_nodes: []
        k8s_worker_nodes: []
        k8s_kubeconfig_path: "/etc/kubernetes/admin.conf"
        k8s_deployment_timeout: 3600
        k8s_poll_interval: 30
        
    - name: Display fallback warning
      debug:
        msg: "Warning: Failed to read user_input.yml, using fallback values"
  when: kubernetes_deployment.enabled | default(false)

- name: Debug extracted variables
  debug:
    msg:
      - "k8s_ssh_key_path: {{ k8s_ssh_key_path | default('NOT SET') }}"
      - "k8s_default_user: {{ k8s_default_user | default('NOT SET') }}"
      - "k8s_control_plane_nodes: {{ k8s_control_plane_nodes | default([]) | length }} nodes"
      - "k8s_kubeconfig_path: {{ k8s_kubeconfig_path | default('NOT SET') }}"
      - "k8s_deployment_timeout: {{ k8s_deployment_timeout | default('NOT SET') }} seconds"
      - "k8s_poll_interval: {{ k8s_poll_interval | default('NOT SET') }} seconds"
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Validate that control plane nodes are defined
  fail:
    msg: "No control plane nodes defined in configuration. Please check your user_input.yml file."
  when:
    - kubernetes_deployment.enabled | default(false)
    - k8s_control_plane_nodes | default([]) | length == 0
    - not ignore_all_errors | bool

- name: Generate inventory content
  template:
    src: "{{ playbook_dir }}/templates/inventory.ini.j2"
    dest: "{{ inventory_dir }}/kubespray/inventory.ini"
  vars:
    control_plane_nodes: "{{ k8s_control_plane_nodes }}"
    worker_nodes: "{{ k8s_worker_nodes }}"
    ssh_key_path: "{{ k8s_ssh_key_path }}"
    default_ansible_user: "{{ k8s_default_user }}"
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Show generated inventory file contents
  command: cat {{ inventory_dir }}/kubespray/inventory.ini
  register: inventory_contents
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Display debug information
  debug:
    msg: |
      Current Directory: {{ current_dir.stdout }}
      Inventory Path: {{ inventory_dir }}/kubespray/inventory.ini
      Kubespray Dir: {{ kubespray_dir }}
      Group Vars Path: {{ inventory_dir }}/kubespray/group_vars/all/all.yml
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Test SSH connection to all hosts
  command:
    cmd: "ssh -i {{ k8s_ssh_key_path | expanduser | realpath | default('~/.ssh/k8s_rsa') }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ item.ansible_user | default(k8s_default_user) }}@{{ item.ansible_host }} 'echo SSH connection successful'"
  loop: "{{ k8s_control_plane_nodes + k8s_worker_nodes }}"
  register: ssh_test
  changed_when: false
  ignore_errors: true
  when: kubernetes_deployment.enabled | default(false)

- name: Display SSH test results
  debug:
    var: ssh_test
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Set Ansible environment variables
  set_fact:
    ansible_env_vars: "{{ kubespray_env | combine(kubespray_extra_env) }}"
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Set default values for async execution
  set_fact:
    kubespray_async_timeout: "{{ k8s_deployment_timeout | default(3600) }}"  # Use configurable timeout
    kubespray_poll_interval: "{{ k8s_poll_interval | default(30) }}"    # Use configurable poll interval
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Display deployment timeout settings
  debug:
    msg:
      - "Kubespray deployment timeout: {{ kubespray_async_timeout }} seconds ({{ (kubespray_async_timeout | int / 60) | round(1) }} minutes)"
      - "Polling interval: {{ kubespray_poll_interval }} seconds"
      - "Maximum polls: approximately {{ (kubespray_async_timeout | int / kubespray_poll_interval | int) | round(0) }}"
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Run Kubespray cluster deployment
  command:
    cmd: >
      ansible-playbook -i {{ inventory_dir }}/kubespray/inventory.ini
      {{ kubespray_dir }}/cluster.yml
      -e @{{ inventory_dir }}/kubespray/group_vars/all/all.yml
      --become
      --become-method={{ kubespray_become_method }}
      --become-user={{ kubespray_become_user }}
      -e ansible_ssh_private_key_file={{ k8s_ssh_key_path | expanduser | realpath | default('~/.ssh/k8s_rsa') }}
      -e ansible_user={{ k8s_default_user }}
      -e ansible_become_pass=''
      --ssh-extra-args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      -vvvv
  environment: "{{ kubespray_env | combine(kubespray_extra_env) | combine({'ANSIBLE_CONFIG': playbook_dir + '/ansible.cfg'}) }}"
  register: kubespray_result
  async: "{{ kubespray_async_timeout }}"
  poll: "{{ kubespray_poll_interval }}"
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Display Kubespray deployment result
  debug:
    msg: |
      STDOUT:
      {{ kubespray_result.stdout_lines | default([]) | join('\n') }}
      
      STDERR:
      {{ kubespray_result.stderr_lines | default([]) | join('\n') }}
  when: kubespray_result is defined and kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Ensure files directory exists
  file:
    path: "{{ lookup('env', 'PWD') }}/files"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Create temporary readable copy of kubeconfig on remote master
  shell: |
    if [ -f "{{ k8s_kubeconfig_path }}" ]; then
      sudo cp {{ k8s_kubeconfig_path }} /tmp/kubeconfig_temp
      sudo chown {{ k8s_default_user }}:{{ k8s_default_user }} /tmp/kubeconfig_temp
      sudo chmod 644 /tmp/kubeconfig_temp
      echo "Kubeconfig copied from {{ k8s_kubeconfig_path }}"
    elif [ -f "/etc/kubernetes/admin.conf" ]; then
      sudo cp /etc/kubernetes/admin.conf /tmp/kubeconfig_temp
      sudo chown {{ k8s_default_user }}:{{ k8s_default_user }} /tmp/kubeconfig_temp
      sudo chmod 644 /tmp/kubeconfig_temp
      echo "Kubeconfig copied from /etc/kubernetes/admin.conf (default fallback)"
    else
      echo "ERROR: No kubeconfig found at {{ k8s_kubeconfig_path }} or /etc/kubernetes/admin.conf"
      exit 1
    fi
  delegate_to: "{{ k8s_control_plane_nodes[0].ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ k8s_ssh_key_path | expanduser | realpath | default('~/.ssh/k8s_rsa') }}"
    ansible_user: "{{ k8s_default_user }}"
  when:
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result is defined
    - kubespray_result is succeeded
  register: kubeconfig_copy_result
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Display kubeconfig copy result
  debug:
    var: kubeconfig_copy_result.stdout_lines
  when:
    - kubernetes_deployment.enabled | default(false)
    - kubeconfig_copy_result is defined
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Copy kubeconfig from first control plane node
  command:
    cmd: "scp -i {{ k8s_ssh_key_path | expanduser | realpath | default('~/.ssh/k8s_rsa') }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ k8s_default_user }}@{{ k8s_control_plane_nodes[0].ansible_host }}:/tmp/kubeconfig_temp {{ lookup('env', 'PWD') }}/files/kubeconfig"
  when: 
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result is defined
    - kubespray_result is succeeded
    - kubeconfig_copy_result is defined
    - kubeconfig_copy_result is succeeded
  ignore_errors: "{{ ignore_all_errors | bool }}"

- name: Cleanup temporary kubeconfig file on remote master
  file:
    path: /tmp/kubeconfig_temp
    state: absent
  delegate_to: "{{ k8s_control_plane_nodes[0].ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ k8s_ssh_key_path | expanduser | realpath | default('~/.ssh/k8s_rsa') }}"
    ansible_user: "{{ k8s_default_user }}"
  when:
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result is defined
    - kubespray_result is succeeded
  ignore_errors: true

- name: Set kubeconfig permissions
  file:
    path: "{{ lookup('env', 'PWD') }}/files/kubeconfig"
    mode: '0600'
  when: 
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result is defined
    - kubespray_result is succeeded 
  ignore_errors: "{{ ignore_all_errors | bool }}" 