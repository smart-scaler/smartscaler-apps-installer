---
- name: Check if Kubernetes deployment is enabled
  fail:
    msg: "Kubernetes deployment is disabled in user_input.yml"
  when: not kubernetes_deployment.enabled | default(false)

- name: Initialize summary tracking
  include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
  when: kubernetes_deployment.enabled | default(false)

- name: Display current working directory
  command: pwd
  register: current_dir
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Read user_input.yml
  slurp:
    src: "{{ playbook_dir }}/user_input.yml"
  register: user_input_content
  when: kubernetes_deployment.enabled | default(false)

- name: Parse user_input.yml content
  set_fact:
    user_input: "{{ user_input_content.content | b64decode | from_yaml }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Set Kubespray variables
  set_fact:
    kube_apiserver_ip: "{{ kubernetes_deployment.api_server.host }}"
    loadbalancer_apiserver:
      address: "{{ kubernetes_deployment.api_server.host }}"
      port: "{{ kubernetes_deployment.api_server.port }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Generate inventory content
  template:
    src: "{{ playbook_dir }}/templates/inventory.ini.j2"
    dest: "{{ inventory_dir }}/kubespray/inventory.ini"
  vars:
    control_plane_nodes: "{{ kubernetes_deployment.control_plane_nodes }}"
    worker_nodes: "{{ kubernetes_deployment.worker_nodes | default([]) }}"
    ssh_key_path: "{{ kubernetes_deployment.ssh_key_path | default('~/.ssh/k8s_rsa') }}"
    default_ansible_user: "{{ kubernetes_deployment.default_ansible_user | default('root') }}"
    kube_apiserver_ip: "{{ kubernetes_deployment.api_server.host }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Show generated inventory file contents
  command: cat {{ inventory_dir }}/kubespray/inventory.ini
  register: inventory_contents
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Display debug information
  debug:
    msg: |
      Current Directory: {{ current_dir.stdout }}
      Inventory Path: {{ inventory_dir }}/kubespray/inventory.ini
      Kubespray Dir: {{ kubespray_dir }}
      Group Vars Path: {{ inventory_dir }}/kubespray/group_vars/all/all.yml
  when: kubernetes_deployment.enabled | default(false)

- name: Create async directory
  file:
    path: "/tmp/.ansible_async"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)

- name: Set Ansible environment variables
  set_fact:
    ansible_async_dir: "/tmp/.ansible_async"
    ansible_local_tmp: "/tmp/.ansible/tmp"
    ansible_remote_tmp: "/tmp/.ansible/tmp"
  when: kubernetes_deployment.enabled | default(false)

- name: Set node IP variables
  set_fact:
    control_plane_ips: "{{ kubernetes_deployment.control_plane_nodes | map(attribute='private_ip') | map('default', ansible_default_ipv4.address) | list }}"
    worker_node_ips: "{{ kubernetes_deployment.worker_nodes | default([]) | map(attribute='private_ip') | map('default', ansible_default_ipv4.address) | list }}"
    first_control_plane_ip: "{{ kubernetes_deployment.control_plane_nodes[0].private_ip | default(hostvars[groups['kube_control_plane'][0]].ansible_default_ipv4.address) }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Set PATH variable
  set_fact:
    system_path: "{{ ansible_env.PATH | default('/usr/local/bin:/usr/bin:/bin') }}"
    venv_path: "{{ playbook_dir }}/venv"
  when: kubernetes_deployment.enabled | default(false)

- name: Check if virtualenv exists
  stat:
    path: "{{ venv_path }}/bin/python"
  register: venv_python
  when: kubernetes_deployment.enabled | default(false)

- name: Create virtualenv if it doesn't exist
  shell: |
    python3 -m venv {{ venv_path }}
    {{ venv_path }}/bin/pip install --upgrade pip
    {{ venv_path }}/bin/pip install -r {{ playbook_dir }}/requirements.txt
  when: 
    - kubernetes_deployment.enabled | default(false)
    - not venv_python.stat.exists | default(false)

- name: Get Python version from virtualenv
  shell: "{{ venv_path }}/bin/python -c 'import sys; print(\"{}.{}\".format(sys.version_info.major, sys.version_info.minor))'"
  register: python_version
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Set Python paths
  set_fact:
    venv_python_path: "{{ venv_path }}/lib/python{{ python_version.stdout }}/site-packages"
  when: kubernetes_deployment.enabled | default(false)

- name: Set Kubespray async configuration
  set_fact:
    kubespray_async_timeout: "{{ kubernetes_deployment.async_config.timeout | default(3600) }}"
    kubespray_poll_interval: "{{ kubernetes_deployment.async_config.poll_interval | default(5) }}"
  when: kubernetes_deployment.enabled | default(false)

- name: Run Kubespray cluster deployment
  shell: |
    timeout {{ kubernetes_deployment.async_config.timeout | default(3600) }} bash -c '. {{ venv_path }}/bin/activate && \
    ANSIBLE_SSH_PIPELINING=False \
    ANSIBLE_SSH_ARGS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=10" \
    {{ venv_path }}/bin/ansible-playbook -i {{ inventory_dir }}/kubespray/inventory.ini \
    {{ kubespray_dir }}/cluster.yml \
    -e @{{ inventory_dir }}/kubespray/group_vars/all/all.yml \
    -e @{{ inventory_dir }}/kubespray/group_vars/k8s_cluster/addons.yml \
    -e "kube_apiserver_ip={{ kubernetes_deployment.api_server.host }}" \
    -e "loadbalancer_apiserver={address: \"{{ kubernetes_deployment.api_server.host }}\", port: {{ kubernetes_deployment.api_server.port }}}" \
    -e "apiserver_loadbalancer_domain_name={{ kubernetes_deployment.api_server.host }}" \
    -e "supplementary_addresses_in_ssl_keys=[\"{{ kubernetes_deployment.api_server.host }}\"] + {{ control_plane_ips | to_json }} + {{ worker_node_ips | to_json }}" \
    -e "kube_apiserver_bind_address={{ first_control_plane_ip }}" \
    -e "kube_apiserver_advertise_address={{ first_control_plane_ip }}" \
    -e "kubernetes_deployment={{ kubernetes_deployment }}" \
    -e ansible_ssh_private_key_file={{ kubernetes_deployment.ssh_key_path | expanduser | realpath }} \
    -e ansible_user={{ kubernetes_deployment.default_ansible_user | default("root") }} \
    -e ansible_become=true \
    -e ansible_become_method=sudo \
    -e "ANSIBLE_TIMEOUT={{ kubespray_async_timeout }}" \
    -e "ANSIBLE_INTERNAL_POLL_INTERVAL={{ kubespray_poll_interval }}" \
    -vvvv'
  args:
    executable: /bin/bash
  environment:
    ANSIBLE_ASYNC_DIR: "/tmp/.ansible_async"
    ANSIBLE_LOCAL_TEMP: "/tmp/.ansible/tmp"
    ANSIBLE_REMOTE_TEMP: "/tmp/.ansible/tmp"
    ANSIBLE_CONFIG: "{{ playbook_dir }}/ansible.cfg"
    PATH: "{{ system_path }}:{{ venv_path }}/bin"
    VIRTUAL_ENV: "{{ venv_path }}"
    PYTHONPATH: "{{ venv_python_path }}"
    ANSIBLE_TIMEOUT: "{{ kubespray_async_timeout }}"
    ANSIBLE_INTERNAL_POLL_INTERVAL: "{{ kubespray_poll_interval }}"
    ANSIBLE_SSH_PIPELINING: "False"
  register: kubespray_result
  async: "{{ kubernetes_deployment.async_config.timeout | default(3600) }}"
  poll: "{{ kubernetes_deployment.async_config.poll_interval | default(5) }}"
  ignore_errors: true
  when: kubernetes_deployment.enabled | default(false)

- name: Display warning if async timeout occurred
  debug:
    msg: |
      WARNING: Kubespray deployment async timeout occurred after {{ kubernetes_deployment.async_config.timeout | default(3600) }} seconds.
      This does not necessarily mean the deployment failed - it may still be in progress.
      Please check the cluster status manually using 'kubectl get nodes' once the deployment completes.
      You can also check the Kubespray logs for more details.
  when:
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result.rc is defined
    - kubespray_result.rc == 124  # timeout exit code

- name: Check Kubespray deployment status
  fail:
    msg: "Kubespray deployment failed. Please check the logs for more details."
  when: 
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result.rc is defined
    - kubespray_result.rc != 0
    - kubespray_result.rc != 124  # don't fail on timeout

- name: Wait for kubeconfig file to be created on first control plane node
  wait_for:
    path: "/etc/kubernetes/admin.conf"
    state: present
    timeout: 300
  when: 
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result.rc is defined
    - (kubespray_result.rc == 0 or kubespray_result.rc == 124)
  delegate_to: "{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }}"
  become: true
  ignore_errors: "{{ kubespray_result.rc == 124 }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ kubernetes_deployment.default_ansible_user }}"

- name: Create output directory
  file:
    path: "{{ playbook_dir }}/output"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
  delegate_to: localhost
  when: kubernetes_deployment.enabled | default(false)

- name: Check kubeconfig with direct SSH command
  shell: |
    ssh -i {{ kubernetes_deployment.ssh_key_path }} -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 {{ kubernetes_deployment.default_ansible_user }}@{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }} "sudo test -f /etc/kubernetes/admin.conf && echo 'exists' || echo 'not found'"
  register: kubeconfig_check
  delegate_to: localhost
  when: 
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result.rc is defined
    - (kubespray_result.rc == 0 or kubespray_result.rc == 124)
  ignore_errors: true

- name: Debug - Show kubeconfig check result
  debug:
    msg: "Kubeconfig check result: {{ kubeconfig_check.stdout | default('check failed') }}"
  when: 
    - kubernetes_deployment.enabled | default(false)
    - kubeconfig_check is defined

- name: Copy kubeconfig from remote host
  shell: |
    mkdir -p {{ playbook_dir }}/output
    ssh -i {{ kubernetes_deployment.ssh_key_path }} -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 {{ kubernetes_deployment.default_ansible_user }}@{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }} "sudo cat /etc/kubernetes/admin.conf" > {{ playbook_dir }}/output/kubeconfig
    chmod 600 {{ playbook_dir }}/output/kubeconfig
    chown {{ ansible_user_id }}:{{ ansible_user_id }} {{ playbook_dir }}/output/kubeconfig
  delegate_to: localhost
  when: 
    - kubernetes_deployment.enabled | default(false)
    - kubeconfig_check is success
    - kubeconfig_check.stdout == 'exists'
  ignore_errors: "{{ kubespray_result.rc == 124 }}"

- name: Debug - Check local kubeconfig
  stat:
    path: "{{ playbook_dir }}/output/kubeconfig"
  register: local_kubeconfig_check
  delegate_to: localhost
  when: kubernetes_deployment.enabled | default(false)

- name: Debug - Show local kubeconfig status
  debug:
    msg: >-
      Local kubeconfig exists: {{ local_kubeconfig_check.stat.exists | default(false) }}
      {%- if local_kubeconfig_check.stat.exists %}
      , Size: {{ local_kubeconfig_check.stat.size }}
      , Permissions: {{ local_kubeconfig_check.stat.mode }}
      {%- endif %}
  when: 
    - kubernetes_deployment.enabled | default(false)
    - local_kubeconfig_check is defined

- name: Fix kubeconfig ownership and permissions
  file:
    path: "{{ playbook_dir }}/output/kubeconfig"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0600'
  delegate_to: localhost
  when: 
    - kubernetes_deployment.enabled | default(false)
    - local_kubeconfig_check.stat.exists | default(false)

- name: Set global kubeconfig path
  set_fact:
    global_kubeconfig: "{{ playbook_dir }}/output/kubeconfig"
  when: kubernetes_deployment.enabled | default(false)
  delegate_to: localhost

- name: Wait for Kubernetes API to be available
  shell: |
    . {{ venv_path }}/bin/activate && \
    KUBECONFIG={{ playbook_dir }}/output/kubeconfig kubectl cluster-info
  args:
    executable: /bin/bash
  register: cluster_info_result
  until: cluster_info_result.rc is defined and cluster_info_result.rc == 0
  retries: 30
  delay: 10
  environment:
    PATH: "{{ system_path }}:{{ venv_path }}/bin"
    VIRTUAL_ENV: "{{ venv_path }}"
  when: 
    - kubernetes_deployment.enabled | default(false)
    - local_kubeconfig_check.stat.exists | default(false)
  ignore_errors: "{{ kubespray_result.rc == 124 }}"

- name: Display status message for async timeout
  debug:
    msg: |
      Kubespray deployment is still in progress (async timeout).
      - Kubeconfig check: {{ kubeconfig_check.stdout | default('not available') }}
      - Local kubeconfig: {{ local_kubeconfig_check.stat.exists | default(false) }}
      Please wait for the deployment to complete and then check the cluster status manually.
  when:
    - kubernetes_deployment.enabled | default(false)
    - kubespray_result.rc == 124

- name: Debug variables
  debug:
    msg:
      - "Playbook dir: {{ playbook_dir }}"
      - "Inventory dir: {{ inventory_dir }}"
      - "Kubespray dir: {{ kubespray_dir }}"
  when: kubernetes_deployment.enabled | default(false) 
