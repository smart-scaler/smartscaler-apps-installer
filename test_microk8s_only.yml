---
# Test MicroK8s deployment only (without Smart Scaler components)
- name: Test MicroK8s Deployment Only
  hosts: localhost
  gather_facts: true
  become: false
  vars_files:
    - user_input.yml
  vars:
    inventory_dir: "{{ playbook_dir }}/inventory"
    microk8s_dir: "{{ playbook_dir }}/microk8s"

  pre_tasks:
    - name: Load and verify user_input.yml
      block:
        - name: Load user_input.yml content
          include_vars:
            file: user_input.yml
            name: user_input

        - name: Set global facts
          set_fact:
            microk8s_deployment: "{{ user_input.microk8s_deployment }}"
            kubernetes_deployment: "{{ user_input.kubernetes_deployment }}"
          when: user_input.microk8s_deployment is defined

        - name: Verify microk8s_deployment section exists
          fail:
            msg: "microk8s_deployment section not found in user_input.yml"
          when: user_input.microk8s_deployment is not defined

        - name: Display loaded configuration
          debug:
            msg: |
              Loaded configuration:
              - MicroK8s enabled: {{ microk8s_deployment.enabled }}
              - MicroK8s channel: {{ microk8s_deployment.microk8s_channel }}
              - API Server: {{ microk8s_deployment.api_server.host }}
              - Worker nodes: {{ microk8s_deployment.worker_nodes | length }}

    - name: Check if MicroK8s deployment is enabled
      debug:
        msg: "MicroK8s deployment is disabled in user_input.yml. Skipping all tasks."
      when: not microk8s_deployment.enabled | default(false)

    - name: Create virtual environment for prerequisites
      shell: |
        python3 -m venv {{ local_environment.project_root }}/{{ local_environment.venv_directory }}
      args:
        creates: "{{ local_environment.project_root }}/{{ local_environment.venv_directory }}"
      delegate_to: localhost
      when: microk8s_deployment.enabled | default(false)

    - name: Install required Python packages in venv
      shell: |
        source {{ local_environment.project_root }}/{{ local_environment.venv_directory }}/bin/activate
        pip install kubernetes>=12.0.0 openshift>=0.12.0 PyYAML>=6.0.1 jinja2>=2.11
      delegate_to: localhost
      when: microk8s_deployment.enabled | default(false)

    - name: Ensure inventory directory exists
      file:
        path: "{{ inventory_dir }}/microk8s"
        state: directory
        mode: '0755'
      when: microk8s_deployment.enabled | default(false)

    - name: Generate MicroK8s inventory from user_input.yml
      include_tasks: "tasks/generate_microk8s_inventory.yml"
      when: microk8s_deployment.enabled | default(false)

  tasks:
    - name: Verify MicroK8s ansible files exist
      stat:
        path: "{{ item }}"
      register: microk8s_files_check
      loop:
        - "{{ playbook_dir }}/microk8s-ansible/site.yml"
        - "{{ inventory_dir }}/microk8s/inventory.yml"
      when: microk8s_deployment.enabled | default(false)
      
    - name: Prepare MicroK8s deployment environment
      debug:
        msg: |
          üîß Preparing MicroK8s deployment:
          - Playbook directory: {{ playbook_dir }}/microk8s-ansible
          - Inventory file: {{ inventory_dir }}/microk8s/inventory.yml
          - Working directory: {{ ansible_env.PWD }}
          
          File verification:
          {% for result in microk8s_files_check.results %}
          - {{ result.item }}: {{ 'EXISTS' if result.stat.exists else 'MISSING' }}
          {% endfor %}
      when: microk8s_deployment.enabled | default(false)
      
    - name: Fail if required files are missing
      fail:
        msg: |
          Missing required files for MicroK8s deployment:
          {% for result in microk8s_files_check.results %}
          {% if not result.stat.exists %}
          - {{ result.item }}
          {% endif %}
          {% endfor %}
      when: 
        - microk8s_deployment.enabled | default(false)
        - microk8s_files_check.results | selectattr('stat.exists', 'equalto', false) | list | length > 0

    - name: Deploy MicroK8s Cluster
      shell: |
        export ANSIBLE_HOST_KEY_CHECKING=False
        export ANSIBLE_CONFIG={{ playbook_dir }}/ansible.cfg
        export ANSIBLE_COLLECTIONS_PATH={{ playbook_dir }}/collections
        cd {{ playbook_dir }}/microk8s-ansible
        ansible-playbook site.yml -i {{ inventory_dir }}/microk8s/inventory.yml -v
      register: microk8s_deployment_result
      failed_when: microk8s_deployment_result.rc != 0
      when: microk8s_deployment.enabled | default(false)
      
    - name: Show MicroK8s deployment status
      debug:
        msg: |
          üöÄ MicroK8s Deployment Completed Successfully!
          
          ‚úÖ Cluster installation: {{ 'SUCCESS' if microk8s_deployment_result.rc == 0 else 'FAILED' }}
          ‚úÖ Return code: {{ microk8s_deployment_result.rc }}
          
          üí° Next step: Test cluster connectivity
          üìÑ Kubeconfig saved to: ./output/kubeconfig
          üåê External endpoint: https://{{ microk8s_deployment.api_server.host }}:16443
          
          Test commands:
          export KUBECONFIG=./output/kubeconfig
          kubectl --context=microk8s get nodes
          kubectl --context=microk8s get pods --all-namespaces
      when: 
        - microk8s_deployment.enabled | default(false)
        - microk8s_deployment_result is defined
        - microk8s_deployment_result.rc == 0
        
    - name: Handle MicroK8s deployment failure
      fail:
        msg: |
          ‚ùå MicroK8s deployment failed with return code {{ microk8s_deployment_result.rc }}
          
          Error output:
          {{ microk8s_deployment_result.stderr }}
          
          Please check the logs above for more details.
      when: 
        - microk8s_deployment.enabled | default(false)
        - microk8s_deployment_result is defined
        - microk8s_deployment_result.rc != 0
